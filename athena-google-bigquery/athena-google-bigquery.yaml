Transform: 'AWS::Serverless-2016-10-31'
Metadata:
  'AWS::ServerlessRepo::Application':
    Name: AthenaGoogleBigQueryConnector
    Description: 'This connector enables Amazon Athena to communicate with Big Query using Google SDK'
    Author: 'default author'
    SpdxLicenseId: Apache-2.0
    LicenseUrl: LICENSE.txt
    ReadmeUrl: README.md
    Labels:
      - Trianz
      - Big-Query
      - Athena-Federation
      - Google-SDK
    HomePageUrl: 'https://github.com/awslabs/aws-athena-query-federation'
    SemanticVersion: 2024.18.2
    SourceCodeUrl: 'https://github.com/awslabs/aws-athena-query-federation'
Parameters:
  LambdaFunctionName:
    Description: 'This is the name of the lambda function that will be created. This name must satisfy the pattern ^[a-z0-9-_]{1,64}$'
    Type: String
    AllowedPattern: ^[a-z0-9-_]{1,64}$
  GcpProjectId:
    Description: "(Optional if Glue Connection is provided) The project ID within Google Cloud Platform ."
    Default: ''
    Type: String
  BigQueryEndpoint:
    Description: "(Optional) BigQuery Private Endpoint"
    Default: ''
    Type: String
  SecretManagerGcpCredsName:
    Description: "The secret name within AWS Secrets Manager that contains your Google Cloud Platform Credentials."
    Type: String
  SpillBucket:
    Description: 'The name of the bucket where this function can spill data.'
    Type: String
  SpillPrefix:
    Description: 'The prefix within SpillBucket where this function can spill data.'
    Type: String
    Default: athena-spill
  GlueConnection:
    Description: "(Optional) Name of glue connection storing connection details for Federated Data source."
    Type: String
    Default: ""
  LambdaTimeout:
    Description: 'Maximum Lambda invocation runtime in seconds. (min 1 - 900 max)'
    Default: 900
    Type: Number
  LambdaMemory:
    Description: 'Lambda memory in MB (min 128 - 3008 max).'
    Default: 3008
    Type: Number
  DisableSpillEncryption:
    Description: 'If set to ''false'' data spilled to S3 is encrypted with AES GCM'
    Default: 'false'
    Type: String
  SecurityGroupIds:
    Description: '(Optional) One or more SecurityGroup IDs corresponding to the SecurityGroup that should be applied to the Lambda function. (e.g. sg1,sg2,sg3)'
    Type: CommaDelimitedList
    Default: ""
  SubnetIds:
    Description: '(Optional) One or more Subnet IDs corresponding to the Subnet that the Lambda function can use to access you data source. (e.g. subnet1,subnet2)'
    Type: CommaDelimitedList
    Default: ""
  PermissionsBoundaryArn:
    Description: "(Optional) An IAM policy ARN to use as the PermissionsBoundary for the created Lambda function's execution role"
    Default: ''
    Type: String
  KmsKeyId:
    Description: "(Optional) By default any data that is spilled to S3 is encrypted using AES-GCM and a randomly generated key. Setting a KMS Key ID allows your Lambda function to use KMS for key generation for a stronger source of encryption keys."
    Type: String
    Default: ""
  LambdaRoleArn:
    Description: "(Optional) A custom role to be used by the Connector lambda"
    Type: String
    Default: ""

Conditions:
  HasSecurityGroups: !Not [ !Equals [ !Join ["", !Ref SecurityGroupIds], "" ] ]
  HasSubnets: !Not [ !Equals [ !Join ["", !Ref SubnetIds], "" ] ]
  HasKmsKeyId: !Not [ !Equals [ !Ref KmsKeyId, "" ] ]
  NotHasLambdaRole: !Equals [ !Ref LambdaRoleArn, "" ]
  HasPermissionsBoundary: !Not [ !Equals [ !Ref PermissionsBoundaryArn, "" ] ]
  CreateKmsPolicy: !And [ !Condition HasKmsKeyId, !Condition NotHasLambdaRole ]
  HasGlueConnection: !Not [ !Equals [ !Ref GlueConnection, "" ] ]
  NotHasGlueConnectionAndHasKmsKeyId: !And
    - !Not [ !Condition HasGlueConnection ]
    - !Condition HasKmsKeyId

Resources:
  AthenaBigQueryConnector:
    Type: 'AWS::Serverless::Function'
    Properties:
      Environment:
        Variables:
          disable_spill_encryption: !If [ HasGlueConnection, !Ref "AWS::NoValue", !Ref DisableSpillEncryption ]
          spill_bucket: !If [ HasGlueConnection, !Ref "AWS::NoValue", !Ref SpillBucket ]
          spill_prefix: !If [ HasGlueConnection, !Ref "AWS::NoValue", !Ref SpillPrefix ]
          kms_key_id: !If [ NotHasGlueConnectionAndHasKmsKeyId, !Ref KmsKeyId, !Ref "AWS::NoValue" ]
          glue_connection: !If [ HasGlueConnection, !Ref GlueConnection, !Ref "AWS::NoValue" ]
          secret_manager_gcp_creds_name: !If [ HasGlueConnection, !Ref "AWS::NoValue", !Ref SecretManagerGcpCredsName ]
          gcp_project_id: !If [ HasGlueConnection, !Ref "AWS::NoValue", !Ref GcpProjectId ]
          big_query_endpoint: !If [ HasGlueConnection, !Ref "AWS::NoValue", !Ref BigQueryEndpoint ]
          GOOGLE_APPLICATION_CREDENTIALS: '/tmp/service-account.json'
      FunctionName: !Ref LambdaFunctionName
      Handler: "com.amazonaws.athena.connectors.google.bigquery.BigQueryCompositeHandler"
      CodeUri: "./target/athena-google-bigquery-2024.18.2.jar"
      Description: "Enables Amazon Athena to communicate with BigQuery using Google SDK"
      Runtime: java11
      Timeout: !Ref LambdaTimeout
      MemorySize: !Ref LambdaMemory
      Role: !If [ NotHasLambdaRole, !GetAtt FunctionRole.Arn, !Ref LambdaRoleArn ]
      VpcConfig:
        SecurityGroupIds: !If [ HasSecurityGroups, !Ref SecurityGroupIds, !Ref "AWS::NoValue" ]
        SubnetIds: !If [ HasSubnets, !Ref SubnetIds, !Ref "AWS::NoValue" ]

  FunctionRole:
    Condition: NotHasLambdaRole
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary: !If [ HasPermissionsBoundary, !Ref PermissionsBoundaryArn, !Ref "AWS::NoValue" ]
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"

  FunctionExecutionPolicy:
    Condition: NotHasLambdaRole
    Type: "AWS::IAM::Policy"
    Properties:
      Roles:
        - !Ref FunctionRole
      PolicyName: FunctionExecutionPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - secretsmanager:GetSecretValue
            Effect: Allow
            Resource: !Sub 'arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${SecretManagerGcpCredsName}*'
          - Action:
              - logs:CreateLogGroup
            Effect: Allow
            Resource: !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*'
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${LambdaFunctionName}:*'
          - Action:
              - athena:GetQueryExecution
              - s3:ListAllMyBuckets
            Effect: Allow
            Resource: '*'
          - Action:
              - ec2:CreateNetworkInterface
              - ec2:DeleteNetworkInterface
              - ec2:DescribeNetworkInterfaces
              - ec2:DetachNetworkInterface
            Effect: Allow
            Resource: '*'
          - Action:
              - s3:GetObject
              - s3:ListBucket
              - s3:GetBucketLocation
              - s3:GetObjectVersion
              - s3:PutObject
              - s3:PutObjectAcl
              - s3:GetLifecycleConfiguration
              - s3:PutLifecycleConfiguration
              - s3:DeleteObject
            Effect: Allow
            Resource:
              - Fn::Sub:
                  - arn:${AWS::Partition}:s3:::${bucketName}
                  - bucketName:
                      Ref: SpillBucket
              - Fn::Sub:
                  - arn:${AWS::Partition}:s3:::${bucketName}/*
                  - bucketName:
                      Ref: SpillBucket
          - !If
            - HasGlueConnection
            - Action:
                - glue:GetConnection
              Effect: Allow
              Resource:
                - !Sub 'arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:connection/${GlueConnection}'
                - !Sub 'arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:catalog'
            - !Ref "AWS::NoValue"

  FunctionKmsPolicy:
    Condition: CreateKmsPolicy
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: FunctionKmsPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - kms:GenerateRandom
            Resource: '*'
          - Effect: Allow
            Action:
              - kms:GenerateDataKey
            Resource: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${KmsKeyId}"
      Roles:
        - !Ref FunctionRole